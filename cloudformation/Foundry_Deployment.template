{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Run FoundryVTT on EC2 with LetsEncrypt TLS support.",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Foundry Configuration"
					},
					"Parameters": [
						"FoundryDownloadLink",
						"AdminUserName",
						"AdminUserPW"
					]
				},
				{
					"Label": {
						"default": "Domain Configuration"
					},
					"Parameters": [
						"FullyQualifiedDomainName",
						"SubdomainName",
						"WebServerBool",
						"ConfigureRoute53Bool"
					]
				},
				{
					"Label": {
						"default": "TLS (HTTPS) Configuration"
					},
					"Parameters": [
						"UseLetsEncryptTLS",
						"Email"
					]
				},
				{
					"Label": {
						"default": "Server Instance"
					},
					"Parameters": [
						"InstanceKey",
						"InstanceType",
						"AMI",
						"UseFixedIP",
						"SshAccessIPv4",
						"SshAccessIPv6"
					]
				},
				{
					"Label": {
						"default": "Storage and Backup"
					},
					"Parameters": [
						"UseExistingS3Bucket",
						"S3BucketName",
						"TakeSnapshots",
						"SnapshotFrequency"
					]
				}
			]
		}
	},
	"Parameters": {
		"FoundryDownloadLink": {
			"Type": "String",
			"Description": "Where to download Foundry. Can be a Patreon link, a publicly shared Google Drive link, or a custom hosted link. Timed Foundry links are possible but not recommended.",
			"AllowedPattern" : ".+"
		},
		"AdminUserName": {
			"Type": "String",
			"Description": "Username for the Foundry IAM user.",
			"AllowedPattern" : "[A-Za-z]+",
			"Default": "FoundryAdmin"
		},
		"AdminUserPW": {
			"Type": "String",
			"Description": "Minimum of 8 characters, maximum of 128 characters. Includes at least one of each: uppercase letter, lowercase letter, number, symbol.",
			"ConstraintDescription": "8 - 128 characters long. Includes at least one of each: uppercase letter, lowercase letter, number, symbol.",
			"AllowedPattern" : ".{8,128}",
			"NoEcho": "True"
		},
		"FullyQualifiedDomainName": {
			"Type": "String",
			"Description": "Your domain name eg. `mydomain.com`. Do NOT include subdomains ie. no `www`!",
			"AllowedPattern": "^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\\.[a-zA-Z]{2,})+$"
		},
		"SubdomainName": {
			"Type": "String",
			"Description": "Name for the Foundry subdomain. Must be all lowercase, no numbers, spaces, or symbols. eg. `foundry` will become `foundry.mydomain.com`",
			"AllowedPattern": "^[a-z]+$",
			"ConstraintDescription": "Must be all lowercase, no numbers, spaces, or symbols.",
			"Default": "foundry"
		},
		"WebServerBool": {
			"Type": "String",
			"Description": "Set this to True if you want Foundry to also be accessible as your main domain.",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"ConfigureRoute53Bool": {
			"Type": "String",
			"Description": "If you haven't set up Route53 before, leave this set to True. Set it to False if your Foundry DNS records already exist. Note: Sometimes CloudFormation doesn't remove existing Route53 Records, even if it set them up. Check Route53 if stack creation fails there.",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "True"
		},
		"UseLetsEncryptTLS": {
			"Type": "String",
			"Description": "Run the LetsEncrypt TLS script. Set to False if you're testing, otherwise leave it at True to use TLS (https).",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "True"
		},
		"Email": {
			"Type": "String",
			"Description": "A valid email address is required for LetsEncrypt TLS certificates.",
			"MinLength": 1,
			"ConstraintDescription": "Please enter a valid email address."
		},
		"InstanceKey": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "The SSH keypair used to access your instance. This MUST be created manually and stored in AWS EC2 / Key Pairs.",
			"ConstraintDescription": "See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair"
		},
		"InstanceType": {
			"Type": "String",
			"Description": "EC2 server instance type. Factor in your use and cost - if unsure, use `t4g.small` for light performance / good cost saving. `m6`-class instances are fast but very expensive and probably not recommended unless you know you need them. See https://aws.amazon.com/ec2/pricing/on-demand/ for info.",
			"AllowedValues": [
				"t3a.small",
				"t3a.medium",
				"t3a.large",
				"m6a.large",
				"m6a.xlarge",
				"t4g.small",
				"t4g.medium",
				"t4g.large",
				"m6g.large",
				"m6g.xlarge"
			],
			"Default": "t4g.small"
		},
		"AMI": {
			"Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
			"Description": "Managed AMI (operating system) image for the EC2. If you're using a `g` class instance, leave it as 'arm64'. `a` class instances MUST change this to `x86_64`.",
			"AllowedValues": [
				"/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64",
				"/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
			],
			"Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64"
		},
		"UseFixedIP": {
			"Type": "String",
			"Description": "Allows you to have a dedicated public IP for your instance. This prevents the IP from changing everytime you shutdown the instance. EIPs are an additional cost. Note from 2024 AWS will charge for all IPv4 address use.",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"SshAccessIPv4": {
			"Type": "String",
			"Description": "Will allow TCP port 22 (SSH) Inbound access for the given IPv4 range. If entering, you MUST specify a valid CIDR range. For a single IPv4 IP use /32. You likely want to use your public IP (https://www.whatsmyip.org/). eg: 123.45.67.89/32. If you leave this blank, you can always set it later in the EC2 instance's Security Group Inbound rules.",
			"Default": "",
			"ConstraintDescription": "Must be a valid IPv4/CIDR range."
		},
		"SshAccessIPv6": {
			"Type": "String",
			"Description": "Will allow TCP port 22 (SSH) Inbound access for the given IPv6 range. If entering, you MUST specify a valid CIDR range. For a single IPv6 IP use /128. You likely want to use your public IP (https://www.whatsmyip.org/). eg: 1234::5678/128. If you leave this blank, you can always set it later in the EC2 instance's Security Group Inbound rules.",
			"Default": "",
			"ConstraintDescription": "Must be a valid IPv6/CIDR range."
		},
		"UseExistingS3Bucket": {
			"Type": "String",
			"Description": "If you have an existing S3 bucket set up for Foundry, set this option to True. The bucket must have a public access policy set. If you don't have a bucket set up, one will be created for you with the name specified next.",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"S3BucketName": {
			"Type": "String",
			"Description": "Name for S3 bucket that will be created or used. This must be globally unique across all of AWS. Must be all lowercase letters or numbers, no spaces, and no symbols expect dash (-). A good bucket name could be eg. foundry-mydomain-com",
			"ConstraintDescription": "Must be all lowercase letters, numbers or a dash (-). No spaces or other symbols.",
			"AllowedPattern": "^[a-z|0-9]+([-|a-z|0-9]+)*[a-z|0-9]$"
		},
		"TakeSnapshots": {
			"Type": "String",
			"Description": "Select True if you want to take backup snapshots of your instance. This is recommended but has a (minimal) cost to store the snapshots. Five rolling snapshots are retained by default. See https://aws.amazon.com/ebs/pricing/",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"SnapshotFrequency": {
			"Description": "If taking instance snapshots is set to True, how often you want to take snapshots.",
			"Type": "String",
			"Default": "Weekly",
			"AllowedValues": [
				"Daily",
				"Weekly"
			]
		}
	},
	"Conditions": {
		"CreateSnapshots": {
			"Fn::Equals": [
				{
					"Ref": "TakeSnapshots"
				},
				"True"
			]
		},
		"HasSshIPv4": {
			"Fn::Not": [
				{
					"Fn::Equals": [
						"",
						{
							"Ref": "SshAccessIPv4"
						}
					]
				}
			]
		},
		"HasSshIPv6": {
			"Fn::Not": [
				{
					"Fn::Equals": [
						"",
						{
							"Ref": "SshAccessIPv6"
						}
					]
				}
			]
		},
		"CreateWebServer": {
			"Fn::Equals": [
				{
					"Ref": "WebServerBool"
				},
				"True"
			]
		},
		"ConfigureRoute53": {
			"Fn::Equals": [
				{
					"Ref": "ConfigureRoute53Bool"
				},
				"True"
			]
		},
		"Route53WebServer": {
			"Fn::And": [
				{
					"Condition": "ConfigureRoute53"
				},
				{
					"Condition": "CreateWebServer"
				}
			]
		},
		"NoExistingS3": {
			"Fn::Equals": [
				{
					"Ref": "UseExistingS3Bucket"
				},
				"False"
			]
		},
		"CreateEIP": {
			"Fn::Equals": [
				{
					"Ref": "UseFixedIP"
				},
				"True"
			]
		},
		"DailyCheck": {
			"Fn::Equals": [
				{
					"Ref": "SnapshotFrequency"
				},
				"Daily"
			]
		}
	},
	"Resources": {
		"FoundryServerSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "Foundry VTT",
				"GroupDescription": "Security rules for the FoundryVTT instance",
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": 30000,
						"ToPort": 30000,
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"SecurityGroupIngressVoiceIPv4": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 80,
				"IpProtocol": "tcp",
				"ToPort": 80
			}
		},
		"SecurityGroupIngressVoiceIPv6": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIpv6": "::/0",
				"FromPort": 80,
				"IpProtocol": "tcp",
				"ToPort": 80
			}
		},
		"SecurityGroupIngressVoiceRangeIPv4": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 49152,
				"IpProtocol": "tcp",
				"ToPort": 65535
			}
		},
		"SecurityGroupIngressVoiceRangeIPv6": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIpv6": "::/0",
				"FromPort": 49152,
				"IpProtocol": "tcp",
				"ToPort": 65535
			}
		},
		"SecurityGroupIngressHttpIPv4": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 33478,
				"IpProtocol": "tcp",
				"ToPort": 33478
			}
		},
		"SecurityGroupIngressHttpIPv6": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIpv6": "::/0",
				"FromPort": 33478,
				"IpProtocol": "tcp",
				"ToPort": 33478
			}
		},
		"SecurityGroupIngressHttpsIPv4": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 443,
				"IpProtocol": "tcp",
				"ToPort": 443
			}
		},
		"SecurityGroupIngressHttpsIPv6": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIpv6": "::/0",
				"FromPort": 443,
				"IpProtocol": "tcp",
				"ToPort": 443
			}
		},
		"SecurityGroupIngressSshIPv4": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Condition": "HasSshIPv4",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": {
					"Ref": "SshAccessIPv4"
				},
				"FromPort": 22,
				"IpProtocol": "tcp",
				"ToPort": 22
			}
		},
		"SecurityGroupIngressSshIPv6": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Condition": "HasSshIPv6",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIpv6": {
					"Ref": "SshAccessIPv6"
				},
				"FromPort": 22,
				"IpProtocol": "tcp",
				"ToPort": 22
			}
		},
		"Route53RSWebWWW": {
			"Type": "AWS::Route53::RecordSet",
			"Condition": "Route53WebServer",
			"Properties": {
				"Name": {
					"Fn::Sub": "www.${FullyQualifiedDomainName}"
				},
				"Type": "CNAME",
				"HostedZoneName": {
					"Fn::Sub": "${FullyQualifiedDomainName}."
				},
				"ResourceRecords": [
					{
						"Ref": "FullyQualifiedDomainName"
					}
				],
				"TTL": "120"
			}
		},
		"FoundryBucket": {
			"Condition": "NoExistingS3",
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Ref": "S3BucketName"
				},
				"OwnershipControls": {
					"Rules": [
						{
							"ObjectOwnership": "ObjectWriter"
						}
					]
				},
				"PublicAccessBlockConfiguration": {
					"BlockPublicAcls" : false,
					"BlockPublicPolicy" : false,
					"IgnorePublicAcls" : false,
					"RestrictPublicBuckets" : false
				},
				"CorsConfiguration": {
					"CorsRules": [
						{
							"AllowedOrigins": [
								"*"
							],
							"AllowedHeaders": [
								"*"
							],
							"AllowedMethods": [
								"GET",
								"POST",
								"HEAD"
							],
							"MaxAge": "3000"
						}
					]
				}
			}
		},
		"FoundryBucketPolicy": {
			"Condition": "NoExistingS3",
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": {
					"Ref": "FoundryBucket"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Sid": "PublicReadGetObject",
							"Action": "s3:GetObject",
							"Effect": "Allow",
							"Principal": "*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3BucketName}/*"
							}
						}
					]
				}
			}
		},
		"AdminUser": {
			"Type": "AWS::IAM::User",
			"Properties": {
				"LoginProfile": {
					"Password": {
						"Ref": "AdminUserPW"
					}
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AdministratorAccess"
				],
				"UserName": {
					"Ref": "AdminUserName"
				}
			}
		},
		"UserKey": {
			"Type": "AWS::IAM::AccessKey",
			"Properties": {
				"Status": "Active",
				"UserName": {
					"Ref": "FoundryUser"
				}
			}
		},
		"FoundryUser": {
			"Type": "AWS::IAM::User",
			"Properties": {
				"Policies": [
					{
						"PolicyName": "S3Foundry",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Sid": "ManageObjects",
									"Effect": "Allow",
									"Action": [
										"s3:PutObject",
										"s3:GetObject",
										"s3:ListBucket",
										"s3:DeleteObject",
										"s3:PutObjectAcl"
									],
									"Resource": [
										{
											"Fn::Sub": "arn:aws:s3:::${S3BucketName}/*"
										},
										{
											"Fn::Sub": "arn:aws:s3:::${S3BucketName}"
										}
									]
								},
								{
									"Sid": "ListBuckets",
									"Effect": "Allow",
									"Action": "s3:ListAllMyBuckets",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"FoundryServer": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"users": {
							"foundry": {
								"uid": "182",
								"homeDir": "/home/foundry"
							}
						},
						"files": {
							"/tmp/foundry-setup.log": {
								"content": "===== STARTING INSTALL =====\n"
							},
							"/foundryssl/variables.sh": {
								"content": {
									"Fn::Join": [
										"",
										[
											"#!/bin/bash\n",
											"foundry_user=foundry\n",
											"foundry_home=/foundrydata\n",
											"region=",
											{
												"Ref": "AWS::Region"
											},
											"\n",
											"fqdn=",
											{
												"Ref": "FullyQualifiedDomainName"
											},
											"\n",
											"subdomain=",
											{
												"Ref": "SubdomainName"
											},
											"\n",
											"email=",
											{
												"Ref": "Email"
											},
											"\n",
											"webserver_bool=",
											{
												"Ref": "WebServerBool"
											},
											"\n",
											"enable_letsencrypt=",
											{
												"Ref": "UseLetsEncryptTLS"
											},
											"\n"
										]
									]
								},
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/foundryssl/variables_tmp.sh": {
								"content": {
									"Fn::Join": [
										"",
										[
											"#!/bin/bash\n",
											"foundry_download_link='",
											{
												"Ref": "FoundryDownloadLink"
											},
											"'\n",
											"access_key_id=",
											{
												"Ref": "UserKey"
											},
											"\n",
											"secret_access_key=",
											{
												"Fn::GetAtt": [
													"UserKey",
													"SecretAccessKey"
												]
											}
										]
									]
								},
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/etc/awslogs/awscli.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[plugins]\n",
											"cwlogs = cwlogs\n",
											"[/tmp/foundry-setup.log]\n",
											"[default]\n",
											"region = ",
											{
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								},
								"mode": "000700",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"A_Install_Git": {
								"command": "sudo dnf install -y git"
							},
							"B_Clone_Repo": {
								"command": "sudo git clone --branch patch-1 https://github.com/tocco934/aws-foundry-ssl.git",
								"cwd": "/"
							},
							"C_Start_Install": {
								"command": "sudo bash /aws-foundry-ssl/setup/install.sh",
								"cwd": "/"
							}
						}
					}
				}
			},
			"CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT25M"
                }
            },
			"Properties": {
				"KeyName": {
					"Ref": "InstanceKey"
				},
				"ImageId": {
					"Ref": "AMI"
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"SecurityGroupIds": [
					{
						"Ref": "FoundryServerSG"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": "FoundryServer"
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -x\n",
								"AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
								"AWS_REGION=${AWS_AVAIL_ZONE::-1}\n",
								"AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
								"ROOT_VOLUME_IDS=$(aws ec2 describe-instances --region $AWS_REGION --instance-id $AWS_INSTANCE_ID --output text --query Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId)\n",
								"aws ec2 create-tags --resources ${ROOT_VOLUME_IDS} --region $AWS_REGION --tags Key=Snapshot,Value=true\n",
								"# Install the files and packages from the metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource FoundryServer ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"# Signal the status from cfn-init\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource FoundryServer ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								}
							]
						]
					}
				}
			}
		},
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Policies": [
					{
						"PolicyName": "EC2Manager",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Sid": "VisualEditor0",
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeInstances",
										"ec2:CreateTags",
										"route53:ListResourceRecordSets",
										"route53:ChangeResourceRecordSets",
										"route53:ListHostedZones",
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents",
										"logs:DescribeLogStreams",
										"logs:PutRetentionPolicy"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [
					{
						"Ref": "InstanceRole"
					}
				]
			}
		},
		"InstanceEIP": {
			"Condition": "CreateEIP",
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"InstanceId": {
					"Ref": "FoundryServer"
				}
			}
		},
		"SnapshotPolicy": {
			"Condition": "CreateSnapshots",
			"Type": "AWS::DLM::LifecyclePolicy",
			"Properties": {
				"State": "ENABLED",
				"Description": "Foundry Server snapshot policy",
				"ExecutionRoleArn": {
					"Fn::GetAtt": [
						"InstanceRole",
						"Arn"
					]
				},
				"PolicyDetails": {
					"PolicyType": "EBS_SNAPSHOT_MANAGEMENT",
					"ResourceTypes": [
						"VOLUME"
					],
					"TargetTags": [
						{
							"Key": "Snapshot",
							"Value": "true"
						}
					],
					"Schedules": [
						{
							"Fn::If": [
								"DailyCheck",
								{
									"Name": "Snapshots",
									"CreateRule": {
										"CronExpression": "cron(0 12 * * ? *)"
									},
									"RetainRule": {
										"Count": 5
									},
									"CopyTags": true
								},
								{
									"Name": "Snapshots",
									"CreateRule": {
										"CronExpression": "cron(0 12 ? * 2 *)"
									},
									"RetainRule": {
										"Count": 5
									},
									"CopyTags": true
								}
							]
						}
					]
				}
			}
		}
	}
}
